#! /usr/bin/env atf-sh

SERVER_HOST=localhost
SERVER_PORT=1234
SERVER=${SERVER_HOST}:${SERVER_PORT}

PROXY_HOST=localhost
PROXY_PORT=4321
PROXY=${PROXY_HOST}:${PROXY_PORT}

base_head() {
    atf_set "require.progs" "diff hexdump nc printf proxy"
    atf_set "descr" ${1:-"A given test produces the expected result"}
}
base_body() {

    echo "expected result:"
    hexdump -C test.ok
    echo "actual result:"
    hexdump -C test.out

    diff -u test.ok test.out \
        || atf_fail "Actual result did not match expected"
}

# Builds - Maybe redundant because of Travis?
atf_test_case validation1
validation1_head() {
    base_head "Build test"
}
validation1_body() {
    atf_fail "test not implemented"
}

# Command Line Arguments --help and -h
atf_test_case validation2
validation2_head() {
    base_head "Support of command line arguments --help and -h"
}
validation2_body() {
	printf > test.ok "usage: proxy [OPTIONS] PORT, where
  OPTIONS:\n\t-h, --help, to display this usage message\n\t-v, --verbose, for verbose output
"
    echo "Testing --help"
    proxy --help ${PROXY_PORT} > test.out
    base_body

    echo ""
    echo "Testing -h"
    proxy -h ${PROXY_PORT} > test.out
    base_body
}

# Command Line Arguments --verbose and -v
atf_test_case validation3
validation3_head() {
    base_head "Support of command line arguments --verbose and -v"
}
validation3_body() {
    printf > test.ok "listening on port ${PROXY_PORT}
"
    echo "Testing --verbose"       
    proxy --verbose ${PROXY_PORT} 2> test.out &
    sleep 1
    kill %1 && wait %1
    base_body

    echo ""
    echo "Testing -v"       
    proxy -v ${PROXY_PORT} 2> test.out &
    sleep 1
    kill %1 && wait %1
    base_body
}

# Silent
atf_test_case validation4
validation4_head() {
    base_head "Proxy runs silent by default"
}
validation4_body() {
    atf_fail "test not implemented"
}

# Server Architecture - Other parts of this might be handled by existing tests
atf_test_case validation5
validation5_head() {
    base_head "Proxy forks on each client connection and leaves no zombies"
}
validation5_body() {
    atf_fail "test not implemented"
}

# Client Support
atf_test_case validation6
validation6_head() {
    base_head "Proxy supports at least wget and lynx"
}
validation6_body() {
    atf_fail "test not implemented"
}

# Basic Functionality -  Not sure about this one?
atf_test_case validation7
validation7_head() {
    base_head "Test the functionality of the proxy using existing tests"
}
validation7_body() {
    atf_fail "test not implemented"
}

# Error Checking - Not sure how to test this (at minimum all syscalls need
#                  error checking)
atf_test_case validation8
validation8_head() {
    base_head "Test error checking"
}
validation8_body() {
    atf_fail "test not implemented"
}

# Testing via Valgrind - Not sure we need this here but it might be nice
atf_test_case validation9
validation9_head() {
    base_head "Test for memory leaks using Valgrind"
}
validation9_body() {
    atf_fail "test not implemented"
}

atf_init_test_cases() {
    atf_add_test_case validation1
    atf_add_test_case validation2
    atf_add_test_case validation3
    atf_add_test_case validation4
    atf_add_test_case validation5
    atf_add_test_case validation6
    atf_add_test_case validation7
    atf_add_test_case validation8
    atf_add_test_case validation9
}

# Local Variables:
# mode: sh
# End:
# vim: filetype=sh fileformat=unix
