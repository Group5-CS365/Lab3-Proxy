#! /usr/bin/env atf-sh

SERVER_HOST=localhost
SERVER_PORT=1234
SERVER=${SERVER_HOST}:${SERVER_PORT}

PROXY_HOST=localhost
PROXY_PORT=4321
PROXY=${PROXY_HOST}:${PROXY_PORT}

TEST_URL=http://blue.cs.sonoma.edu/\~rmoeller/test

base_body() {
    echo "expected result:"
    hexdump -C test.ok
    echo "actual result:"
    hexdump -C test.out

    diff -u test.ok test.out \
        || atf_fail "Actual result did not match expected"
}

# Builds - Redundant sending atf_pass
atf_test_case validation1
validation01_head() {
    atf_set "descr" "Build test"
    atf_set "require.progs" "proxy"
}
validation01_body() {
    atf_pass
}

# Command Line Arguments --help and -h
atf_test_case validation02
validation02_head() {
    atf_set "descr" "Support of command line arguments --help and -h"
    atf_set "require.progs" "proxy"
}
validation02_body() {
    echo "Testing --help"
    atf_check -o match:usage proxy --help

    echo "Testing -h"
    atf_check -o match:usage proxy -h
}

# Command Line Arguments --verbose and -v
atf_test_case validation03
validation03_head() {
    atf_set "descr" "Support of command line arguments --verbose and -v"
    atf_set "require.progs" "proxy"
}
validation03_body() {
    echo "Testing --verbose"
    proxy --verbose ${PROXY_PORT} 2> test1.out &
    sleep 1
    kill %1 && wait %1
    atf_check -o match:${PROXY_PORT} cat test1.out

    echo "Testing -v"
    proxy -v ${PROXY_PORT} 2> test2.out &
    sleep 1
    kill %1 && wait %1
    atf_check -o match:${PROXY_PORT} cat test2.out
}

# Silent
atf_test_case validation04
validation04_head() {
    atf_set "descr" "Proxy runs silent by default"
    atf_set "require.progs" "proxy"
}
validation04_body() {
    proxy ${PROXY_PORT} > test.out 2> test.err &
    sleep 1
    echo "test" | nc ${PROXY_HOST} ${PROXY_PORT}
    kill %1 && wait %1
    atf_check -o empty cat test.out
    atf_check -o empty cat test.err
}

# Server Architecture
atf_test_case validation05
validation05_head() {
    atf_set "descr" "Proxy forks on each client connection and leaves no zombies"
}
validation05_body() {
    atf_skip "No test implemented (check manually)"
}

# Client Support - wget
atf_test_case validation06
validation06_head() {
    atf_set "descr" "Proxy supports wget client"
    atf_set "require.progs" "diff hexdump printf proxy wget"
}
validation06_body() {
    proxy -v ${PROXY_PORT} &
    sleep 1
    http_proxy=http://${PROXY} wget -O test.out ${TEST_URL}

    printf > test.ok "\
hello world
"
    base_body
}

# Client Support - lynx
atf_test_case validation07
validation07_head() {
    atf_set "descr" "Proxy supports lynx client"
    atf_set "require.progs" "diff hexdump lynx printf proxy"
}
validation07_body() {
    proxy -v ${PROXY_PORT} &
    sleep 1
    http_proxy=http://${PROXY} lynx -source ${TEST_URL} > test.out

    printf > test.ok "\
hello world
"
    base_body
}

# Basic Functionality
atf_test_case validation08
validation08_head() {
    atf_set "descr" "Basic functionality of the proxy"
}
validation08_body() {
    atf_skip "Covered by other tests"
}

# Error Checking
# TODO: Not sure how to test this (at minimum all syscalls need error checking)
atf_test_case validation09
validation09_head() {
    atf_set "descr" "All system calls checked for errors"
}
validation09_body() {
    atf_skip "Test not implemented (check manually)"
}

# Testing via Valgrind
atf_test_case validation10
validation10_head() {
    atf_set "require.progs" "nc printf proxy valgrind"
    atf_set "descr" "Test for memory leaks using Valgrind (see verbose output)"
    atf_set "timeout" 5
}
validation10_body() {
    printf > test.in "\
GET http://blue.cs.sonoma.edu/ HTTP/1.1\r
Host: blue.cs.sonoma.edu\r
User-Agent: curl/7.54.0\r
Accept: */*\r
Proxy-Connection: Keep-Alive\r
\r
"
    valgrind --tool=memcheck --leak-check=yes proxy -v ${PROXY_PORT} 2> test.out &
    sleep 1 # Give the proxy time to start
    nc ${PROXY_HOST} ${PROXY_PORT} < test.in
    sleep 1 # Give valgrind time to print results
    kill %1 && wait %1
    atf_check -o match:"no leaks are possible" cat test.out
}

atf_init_test_cases() {
    atf_add_test_case validation01
    atf_add_test_case validation02
    atf_add_test_case validation03
    atf_add_test_case validation04
    atf_add_test_case validation05
    atf_add_test_case validation06
    atf_add_test_case validation07
    atf_add_test_case validation08
    atf_add_test_case validation09
    atf_add_test_case validation10
}

# Local Variables:
# mode: sh
# End:
# vim: filetype=sh fileformat=unix
