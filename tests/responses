#! /usr/bin/env atf-sh

SERVER_HOST=localhost
SERVER_PORT=2345
SERVER=${SERVER_HOST}:${SERVER_PORT}

PROXY_HOST=localhost
PROXY_PORT=5432
PROXY=${PROXY_HOST}:${PROXY_PORT}

dummy_request() {
    printf "GET http://${SERVER}/ HTTP/1.0\r\nHost: ${SERVER}\r\n\r\n"
}

base_head() {
    atf_set "timeout" 1
    atf_set "require.progs" "hexdump diff nc printf proxy"
    atf_set "descr" \
            "${1:-A given response produces the expected response at the client}"
}

base_body() {
    nc -l ${SERVER_PORT} < test.in &
    proxy -v ${PROXY_PORT} &
    dummy_request | nc ${PROXY_HOST} ${PROXY_PORT} > test.out

    echo "expected response:"
    hexdump -C test.ok
    echo "actual response:"
    hexdump -C test.out

    diff -u test.ok test.out \
        || atf_fail "Actual response did not match expected"
}

atf_test_case response1
response1_head() {
    base_head "The proxy responds with the server's full response"
}
response1_body() {
    printf > test.in "\
HTTP/1.1 404 Not Found\r
Date: Sat, 21 Apr 2018 02:24:10 GMT\r
Server: Apache/2.4.18 (Fedora) OpenSSL/1.0.1k-fips\r
Content-Length: 208\r
Content-Type: text/html; charset=iso-8859-1\r
\r
<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">
<html><head>
<title>404 Not Found</title>
</head><body>
<h1>Not Found</h1>
<p>The requested URL /index.html was not found on this server.</p>
</body></html>
"
    cp test.in test.ok
    base_body
}

atf_test_case response2
response2_head() {
    base_head "Timeout waiting for INT_MAX+1 bytes from server -> 504 response"
}
response2_body() {
    printf > test.in "\
HTTP/1.1 404 Not Found\r
Date: Sat, 21 Apr 2018 02:24:10 GMT\r
Server: Apache/2.4.18 (Fedora) OpenSSL/1.0.1k-fips\r
Content-Length: 2147483648\r
Content-Type: text/html; charset=iso-8859-1\r
\r
<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">
<html><head>
<title>404 Not Found</title>
</head><body>
<h1>Not Found</h1>
<p>The requested URL /index.html was not found on this server.</p>
</body></html>
"
    echo "TODO: 504 response" > test.ok
    base_body
}

atf_test_case response3
response3_head() {
    base_head "Timeout waiting for INT_MAX bytes from server -> 504 response"
}
response3_body() {
    printf > test.in "\
HTTP/1.1 404 Not Found\r
Date: Sat, 21 Apr 2018 02:24:10 GMT\r
Server: Apache/2.4.18 (Fedora) OpenSSL/1.0.1k-fips\r
Content-Length: 2147483647\r
Content-Type: text/html; charset=iso-8859-1\r
\r
<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">
<html><head>
<title>404 Not Found</title>
</head><body>
<h1>Not Found</h1>
<p>The requested URL /index.html was not found on this server.</p>
</body></html>
"
    echo "TODO: 504 response" > test.ok
    base_body
}

atf_test_case response4
response4_head() {
    atf_set "timeout" 60
    atf_set "require.progs" "hexdump diff nc printf proxy sed stat"
    atf_set "descr" "Large content"
}
response4_body() {
    local server path skip full_len http_len content_len

    server="blue.cs.sonoma.edu"
    path="/~rmoeller/FreeBSD-11.1-RELEASE-amd64-dvd1.iso"

    # NOTE: This test is skipped by default if not running on blue.
    # To enable the extended tests manually, pass invoke Kyua as
    # `kyua -v test_suites.basic.skip_extended_tests=no ...`
    # Conversely, to manually disable the extended tests on blue, invoke Kyua as
    # `kyua -v test_suites.basic.skip_extended_tests=yes ...`
    if [ $(hostname)x = ${server}x ]
    then
        skip="no"
    else
        skip="yes"
    fi
    if [ $(atf_config_get "skip_extended_tests" ${skip})x != "no"x ]
    then
        atf_skip "3GB file takes a while to download..."
    fi

    printf > test.in "\
GET http://${server}${path} HTTP/1.0\r
Host: ${server}\r
Accept: */*\r
\r
"
    proxy -v ${PROXY_PORT} &
    nc ${PROXY_HOST} ${PROXY_PORT} < test.in > test.out

    # NOTE: Netcat gives us the full data sent by the proxy,
    # including the HTTP protocol data.
    # We want to check only the size of the content (headers could vary),
    # so we have to determine the length of the extra HTTP protocol data.

    # Copy the HTTP status line and headers from the beginning of the output.
    # Quits copying after the CRLF separating the headers from the body.
    sed $'/^\r$/q' test.out > http.out

    if [ $(uname -s)x = "Linux"x ]
    then
        full_len=$(stat -c "%s" test.out)
        http_len=$(stat -c "%s" http.out)
    else
        full_len=$(stat -f "%z" test.out)
        http_len=$(stat -f "%z" http.out)
    fi
    content_len=$((full_len - http_len))

    atf_check_equal 3348465664 ${content_len}
}

atf_test_case response5
response5_head() {
    base_head "The server's response is too short"
}
response5_body() {
    printf > test.in "\
HTTP/1.1 404 Not Found\r
Date: Sat, 21 Apr 2018 02:24:10 GMT\r
Server: Apache/2.4.18 (Fedora) OpenSSL/1.0.1k-fips\r
Content-Length: 208\r
Content-Type: text/html; charset=iso-8859-1\r
"
	printf > test.ok "\
HTTP/1.0 502 Bad Gateway\r
Content-Type: text/plain\r
Content-Length: 39\r
\r
The response from the server is invalid"

	base_body
}

atf_test_case response6
response6_head() {
    base_head "The server responds with an invalid status line"
}
response6_body() {
    printf > test.in "\
HTTP/1.1
"
    printf > test.ok "\
HTTP/1.0 502 Bad Gateway\r
Content-Type: text/plain\r
Content-Length: 39\r
\r
The response from the server is invalid"

	base_body
}

atf_test_case response
response7_head() {
    base_head "The server responds with too much data"
}
response7_body() {
    printf > test.in "\
HTTP/1.1
"
	printf > test.ok "\
HTTP/1.0 502 Bad Gateway\r
Content-Type: text/plain\r
Content-Length: 39\r
\r
The response from the server is invalid"

	base_body
}

atf_init_test_cases() {
    atf_add_test_case response1
    atf_add_test_case response2
    atf_add_test_case response3
    atf_add_test_case response4
	atf_add_test_case response5
	atf_add_test_case response6
}

# Local Variables:
# mode: sh
# End:
# vim: filetype=sh fileformat=unix
